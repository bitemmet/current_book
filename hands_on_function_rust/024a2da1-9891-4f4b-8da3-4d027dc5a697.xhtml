<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
    <head>
        <title>Using Option and Result instead of panic!</title>
        <link href="css/style.css" rel="stylesheet" type="text/css"/>
        <meta charset="utf-8"/>
<meta content="urn:uuid:dd0ab1fe-cf2d-4e17-8acb-531b7ebebf1a" name="Adept.expected.resource"/>
    </head>

    <body>
        <section>

                            <header>
                    <h1 class="header-title">Using Option and Result instead of panic!</h1>
                </header>
            
            <article>
                
<p class="p1"><span class="s1">In many other languages, exception handling is performed through <kbd>try…catch</kbd> blocks. Rust does not automatically provide this functionality, instead it encourages the programmer to explicitly localize all error handling.</span></p>
<p class="p1"><span class="s1">In many Rust contexts, if you don’t want to deal with error handling, you always have the option to use <kbd>panic!</kbd>. This will immediately end the program and provide a short error message. Don't do this. Panicking is usually just a way of avoiding the responsibility of handling errors.</span></p>
<p class="p1"><span class="s1">Instead, use either the <kbd>Option</kbd> or <kbd>Result</kbd> types to communicate error or exceptional conditions. <kbd>Option</kbd> indicates that no value is available. The <kbd>None</kbd> value of <kbd>Option</kbd> should indicate that there is no value but that everything is okay and expected.</span></p>
<p class="p1"><span class="s1">The <kbd>Result</kbd> type is used to communicate whether or not there was an error in processing. <kbd>Result</kbd> types can be used in combination with the <kbd>?</kbd> syntax to propagate errors while avoiding introducing too much extra syntax. The <kbd>?</kbd> operation will return errors from the function, if any, and therefore the function must have a <kbd>Result</kbd> return type.</span></p>
<p class="p1"><span class="s1">Here we create two functions that return <kbd>Option</kbd> or <kbd>Result</kbd> to handle exceptional circumstances. Note the use of the try <kbd>?</kbd> syntax when handling <kbd>Result</kbd> return values. This syntax will pass through <kbd>Ok</kbd> values or immediately return any <kbd>Err</kbd> from that function. For this reason, any function using ? must also return a compatible <kbd>Result</kbd> type:</span></p>
<pre class="p1"><span class="s1">//This function returns an Option if the value is not expected<br/>fn expect_1or2or_other(n: u64) -&gt; Option&lt;u64&gt; {<br/></span><span class="s1">   match n {<br/></span><span class="s1">      1|2 =&gt; Some(n),<br/></span><span class="s1">      _ =&gt; None<br/></span><span class="s1">   }<br/></span><span class="s1">}<br/><br/>//This function returns an Err if the value is not expected<br/></span><span class="s1">fn expect_1or2or_error(n: u64) -&gt; Result&lt;u64,()&gt; {<br/></span><span class="s1">   match n {<br/></span><span class="s1">      1|2 =&gt; Ok(n),<br/></span><span class="s1">      _ =&gt; Err(())<br/></span><span class="s1">   }<br/></span><span class="s1">}<br/><br/>//This function uses functions that return Option and Return types<br/></span><span class="s1">fn mixed_1or2() -&gt; Result&lt;(),()&gt; {<br/></span><span class="s1">   expect_1or2or_other(1);<br/></span><span class="s1">   expect_1or2or_other(2);<br/></span><span class="s1">   expect_1or2or_other(3);<br/><br/></span><span class="s1">   expect_1or2or_error(1)?;<br/></span><span class="s1">   expect_1or2or_error(2)?;<br/></span><span class="s1">   expect_1or2or_error(3).unwrap_or(222);<br/></span><span class="s1">   Ok(())<br/></span><span class="s1">}<br/><br/>fn main() {<br/></span><span>   mixed_1or2().expect("mixed 1 or 2 is OK.");<br/>}</span></pre>
<p><kbd>Result</kbd> types are very common when interacting with external resources such as files:</p>
<pre class="p1"><span class="s1">use std::fs::File;<br/></span><span class="s1">use std::io::prelude::*;<br/></span><span class="s1">use std::io;<br/><br/></span><span class="s1">fn lots_of_io() -&gt; io::Result&lt;()&gt; {<br/></span><span class="s1">   {<br/></span><span class="s1">      let mut file = File::create("data.txt")?;<br/></span><span class="s1">      file.write_all(b"data\ndata\ndata")?;<br/></span><span class="s1">   }<br/><br/></span><span class="s1">   {<br/></span><span class="s1">      let mut file = File::open("data.txt")?;<br/></span><span class="s1">      let mut data = String::new();<br/></span><span class="s1">      file.read_to_string(&amp;mut data)?;<br/></span><span class="s1">      println!("{}", data);<br/></span><span class="s1">   }<br/></span><span class="s1">   Ok(())<br/></span><span class="s1">}<br/><br/></span><span class="s1">fn main() {<br/></span><span class="s1">   lots_of_io().expect("lots of io is OK.");<br/></span><span class="s1">}</span></pre>


            </article>

            
        </section>
    </body>

</html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
    <head>
        <title>Summary</title>
        <link href="css/style.css" rel="stylesheet" type="text/css"/>
        <meta charset="utf-8"/>
<meta content="urn:uuid:dd0ab1fe-cf2d-4e17-8acb-531b7ebebf1a" name="Adept.expected.resource"/>
    </head>

    <body>
        <section>

                            <header>
                    <h1 class="header-title">Summary</h1>
                </header>
            
            <article>
                
<p>In this chapter, we introduced the primitives of concurrent computation. Subprocesses, forked processes, and threads are the basic building blocks of all concurrent applications. In Rust threads, there are additional concerns that are introduced by the language to encourage type and thread safety.</p>
<p>In several examples, we built a concurrent web server using fork or threads. Later, while exploring thread behavior, we looked closely at what data can be shared between threads and how information can be sent between threads safely.</p>
<p>In the design pattern section, we introduced the actor design pattern. This popular technique combines some elements of object-oriented programming with other concepts from functional programming. The result is a programming tool designed specifically for complex resilient concurrency.</p>
<p>In the next chapter, we will explore performance, debugging, and metaprogramming. Performance can be hard to measure or compare, but we will try to introduce habits that are strictly good for performance. To help debugging, we will look at proactive and reactive techniques to solve issues. Proactive debugging is a set of techniques, such as proper error handling, that either prevents bugs or makes them easier to document and resolve. Reactive techniques are useful for difficult bugs that don't have an obvious cause. Finally, metaprogramming can do lots of complicated work behind the scenes to make ugly code look nicer.</p>


            </article>

            
        </section>
    </body>

</html>
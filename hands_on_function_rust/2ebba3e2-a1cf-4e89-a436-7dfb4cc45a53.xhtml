<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
    <head>
        <title>Reflecting on the project structure</title>
        <link href="css/style.css" rel="stylesheet" type="text/css"/>
        <meta charset="utf-8"/>
<meta content="urn:uuid:dd0ab1fe-cf2d-4e17-8acb-531b7ebebf1a" name="Adept.expected.resource"/>
    </head>

    <body>
        <section>

                            <header>
                    <h1 class="header-title">Reflecting on the project structure</h1>
                </header>
            
            <article>
                
<p>Now that we have developed code to organize and connect different elevator functions, as well as three executables to simulate, analyze, and operate the elevators, let's ask ourselves thisâ€”how does it all fit together, and have we done a good job architecting this project thus far?</p>
<p>Reviewing this chapter, we can quickly see that we have made use of four different code organization techniques. At a more casual level, the code seems to fall into categories, as follows:</p>
<ul>
<li><strong>Luggage</strong>: Like drivers that need to be connected, but may be difficult to work with</li>
<li><strong>Nuts</strong>, <strong>bolts</strong>, and <strong>gears</strong>: Like structs and traits, we have a lot of control of how to design</li>
<li><strong>Deliverables</strong>: Like executables, these must fulfill a specific requirement</li>
</ul>
<p>We have organized all deliverables by convenience; all luggage by type or by purpose; and nuts, bolts, and gears have been organized by type, by purpose, or by layer. The result could be worse, and organizing by a different standard does not imply that the code will change significantly. Overall, the deliverables are supported by fairly maintainable code and the project is going in a good direction.</p>


            </article>

            
        </section>
    </body>

</html>
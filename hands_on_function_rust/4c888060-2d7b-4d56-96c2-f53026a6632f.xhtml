<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
    <head>
        <title>Summary</title>
        <link href="css/style.css" rel="stylesheet" type="text/css"/>
        <meta charset="utf-8"/>
<meta content="urn:uuid:dd0ab1fe-cf2d-4e17-8acb-531b7ebebf1a" name="Adept.expected.resource"/>
    </head>

    <body>
        <section>

                            <header>
                    <h1 class="header-title">Summary</h1>
                </header>
            
            <article>
                
<p>In this chapter, we explored the basic and deeper concepts of generic and parameterized programming. We learned how to add lifetime, type, and trait parameters to declarations of types, traits, functions, and implementations. We also examined advanced techniques to selectively preserve or obscure type information as desired.</p>
<p>Applying these concepts to the elevator simulation, we observed how parameterization and generics can create fully abstract interfaces. By using trait objects, it is possible to completely separate trait interfaces from any implementation. We also observed the downsides or difficulties of parameterization and generics. Excessive use of parameterization can lead to parameter leaks, potentially requiring all code that interfaces with an interface to also become parameterized itself. On the other hand, we observed the difficulty associated with erasing type information using trait objects. Choosing the right amount of information to preserve is important.</p>
<p>In the next chapter, we will learn about applied project structure with complex requirements. The client will respond to the project proposal and your team will respond to new requirements.</p>


            </article>

            
        </section>
    </body>

</html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
    <head>
        <title>Design Patterns</title>
        <link href="css/style.css" rel="stylesheet" type="text/css"/>
        <meta charset="utf-8"/>
<meta content="urn:uuid:dd0ab1fe-cf2d-4e17-8acb-531b7ebebf1a" name="Adept.expected.resource"/>
    </head>

    <body>
        <section>

                            <header>
                    <h1 class="header-title">Design Patterns</h1>
                </header>
            
            <article>
                
<p class="mce-root">Functional programming ha<span>s developed design patterns just like object-oriented or other communities. These patterns, unsurprisingly, make use of functions as a central concept. They also emphasize something called the</span> <strong>single responsibility principle</strong><span>. The single responsibility principle states that program's logical components should do one thing and do that one thing well. In this chapter, we will focus on a few very common patterns. Some of these concepts are so</span> simple<span> that they counter-intuitively become harder to explain. In these cases, we will make use of various examples to demonstrate how a simple concept can exhibit complex behavior.</span><br/></p>
<p>In this chapter, you will do the following:</p>
<ul>
<li>Learn to recognize and use functors</li>
<li>Learn to recognize and use monads</li>
<li>Learn to recognize and use combinators</li>
<li>Learn to recognize and use lazy evaluation</li>
</ul>


            </article>

            
        </section>
    </body>

</html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
    <head>
        <title>Generics and Polymorphism</title>
        <link href="css/style.css" rel="stylesheet" type="text/css"/>
        <meta charset="utf-8"/>
<meta content="urn:uuid:dd0ab1fe-cf2d-4e17-8acb-531b7ebebf1a" name="Adept.expected.resource"/>
    </head>

    <body>
        <section>

                            <header>
                    <h1 class="header-title">Generics and Polymorphism</h1>
                </header>
            
            <article>
                
<p class="mce-root"><span>Parameterization, also known as</span> <strong>generics</strong> <span>or</span> <strong>polymorphism</strong><span>, is the third most significant language feature following control flow and data structures. Parameterization addresses the copy-and-paste problem of early languages. This feature permits the</span> <em>don't repeat yourself</em> <span>principle of good program design.</span><br/></p>
<p>In this chapter, we will look at how parameterization can help us design robust programs that evolve with change rather than fight against change. No new project requirements will be introduced. This chapter will be entirely reflective, looking at how the project is currently structured, how can it be improved, and how parameterization can specifically help.</p>
<p>The following are the learning outcomes of this chapter:</p>
<ul>
<li>Understanding generalized algebraic datatypes</li>
<li>Understanding parametric polymorphism</li>
<li>Understanding parametric lifetimes</li>
<li>Understanding parametric traits</li>
<li>Understanding ambiguous method resolution</li>
</ul>


            </article>

            
        </section>
    </body>

</html>